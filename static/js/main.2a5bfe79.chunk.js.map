{"version":3,"sources":["musical-notes.svg","components/subcomponents/Utils.ts","components/subcomponents/StaffLine.tsx","domain/Types.ts","components/subcomponents/Types.ts","components/subcomponents/Cursor.tsx","components/subcomponents/Note.tsx","domain/Tone.ts","domain/Functions.ts","components/subcomponents/Accidentals.tsx","components/Staff.tsx","controls/ChordButton.tsx","controls/ControlPanel.tsx","components/subcomponents/Stem.tsx","domain/ToneInfo.tsx","components/Chord.tsx","TSXApp.tsx","serviceWorker.js","index.js","App.js"],"names":["module","exports","LINE_HEIGHT","positionInStaffToY","position","flattenArray","arrays","concat","apply","cluster","objectsInStaff","maxDiffInCluster","clusters","currentCluster","i","length","currentTone","previousTone","staffPosition","push","BaseTone","NoteValues","Position","Side","StaffLine","props","y","x","key","width","height","className","defaultProps","CursorContext","React","createContext","Cursor","currentCursorPos","useContext","Provider","value","children","maskReference","noteValue","LEFT","RIGHT","NoteHead","positionInStaff","cx","cy","rx","ry","fill","strokeWidth","mask","onClick","console","log","LedgerLines","positions","maxExtent","Array","map","idx","filter","pos","Note","toneInfo","isBottom","isTop","cursor","undefined","strKey","QUARTER","BaseTonesInOrder","C","CSharp","D","DSharp","E","F","FSharp","G","GSharp","A","ASharp","H","OctavesInOrder","toneAsMIDINote","tone","findIndex","toneInList","baseTone","octave","addToTone","toneDelta","MIDINote","toneFromNumber","number","valueOf","Math","floor","quotient","remainder","getAccidental","AFlat","DFlat","EFlat","GFlat","HFlat","inverseThree","rootChordTones","FIRST_INVERSION","SECOND_INVERSION","toneInfoAccidentalTranslator","Boolean","accidental","replace","inverseChord","chord","inversion","tones","rootTones","AccidentalUse","column","symbolId","scrollTargetGroup","startY","xOffset","xlinkHref","data-scrolltargetgroup","Sharp","Flat","PreferredAccidentalsContext","replacer","_","PreferredAccidentalsContextProvider","useMemo","preferredAccidentals","HollowNoteHeadMask","direction","id","maskContentUnits","maskUnits","transform","SharpSymbolDefinition","lineHeight","viewBox","stroke","x1","x2","y1","y2","FlatSymbolDefinition","lengthAdjust","textLength","color","style","font","topStaffLine","min","bottomStaffLine","max","staffWidth","Children","count","staffHeight","xmlns","lineIdx","child","ChordButton","chordSpec","name","ControlPanel","Object","values","root","major","ROOT","majorThree","minor","minorThree","addChord","baseName","Fragment","HALF","Stem","sortedNotePositions","topNotePosition","bottomNotePosition","stemDirection","startPosition","endPosition","mapToneToStaffPosition","Error","JSON","stringify","getBasePosition","toneToMidiNote","baseTones","getNormalizedBaseTone","currentBaseTone","toneToStrKey","toneToToneInfo","midiNote","compareToneInfos","toneInfoA","toneInfoB","MIDINoteA","MIDINoteB","determineStemSide","note","positionInCluster","stemSideForChord","calculateTopAndBottomStaffLine","chords","flat","reduce","curr","prevMin","prevMax","Infinity","Chord","preferredAccidentalsReplacer","partialToneInfos","sort","noteClusters","accidentalClusters","notesProps","clusterIdx","stemSide","accidentalsProps","staffPositions","noteProps","accidentalsStartX","leftNoteHeadsStartX","accidentalProps","stemX","find","rightNodeHeadsStartX","scrollTargetProps","TSXApp","useState","setChords","setScrollTargetGroupGroup","useLayoutEffect","scrollTargetDomElements","document","querySelectorAll","scrollTargetDomElement","scrollIntoView","rotateChordInversion","delta","inversedPositionIdx","updatedChords","updateChord","src","logo","alt","Staff","href","target","rel","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a5bfe79.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/musical-notes.b0e1bcc7.svg\";","export type PositionInStaff = number;\n\nexport const LINE_HEIGHT = 12;\n\nexport function positionInStaffToY(position: PositionInStaff) {\n    return position * LINE_HEIGHT;\n}\n\nexport function flattenArray<T>(arrays: Array<Array<T>>): Array<T> {\n    const result: Array<T> = [];\n    return result.concat.apply([], arrays);\n}\n\nexport function cluster<Placed extends {staffPosition: PositionInStaff}>(objectsInStaff: Array<Placed>, maxDiffInCluster = 1) {\n    const clusters: Array<Array<Placed>> = [];\n    let currentCluster: Array<Placed> = [];\n    for (let i = 0; i < objectsInStaff.length; i++) {\n        const currentTone = objectsInStaff[i];\n        const previousTone = i > 0 && objectsInStaff[i - 1];\n        if (previousTone && (previousTone.staffPosition - currentTone.staffPosition > maxDiffInCluster)) {\n            // End cluster\n            clusters.push(currentCluster);\n            currentCluster = [];\n        }\n        currentCluster.push(currentTone);\n    }\n    clusters.push(currentCluster);\n    return clusters;\n}\n\n","import {PositionInStaff, positionInStaffToY} from \"./Utils\";\nimport React from \"react\";\n\ninterface StaffLineProps {\n    position: PositionInStaff;\n    width: number;\n    x: number;\n}\n\nexport const StaffLine = (props: StaffLineProps) => (\n    <rect\n        y={positionInStaffToY(props.position) + 2}\n        x={props.x}\n        key={props.position}\n        width={props.width}\n        height=\"1\"\n        className={\"staff__line\"}\n    />\n);\n\nStaffLine.defaultProps = {\n    width: 200,\n    x: 0\n};","export enum BaseTone {\n    C = \"C\",\n    CSharp = \"CSharp\",\n    D = \"D\",\n    DSharp = \"DSharp\",\n    E = \"E\",\n    F = \"F\",\n    FSharp = \"FSharp\",\n    G = \"G\",\n    GSharp = \"GSharp\",\n    A = \"A\",\n    ASharp = \"ASharp\",\n    H = \"H\",\n    DFlat = CSharp,\n    EFlat = DSharp,\n    GFlat = FSharp,\n    AFlat = GSharp,\n    HFlat = ASharp\n}\n\nexport type Accidental = 'sharp' | 'flat' | null\n\nexport enum NoteValues {\n    OCTUPLE = 8,\n    LONGA = 4,\n    BREVE = 2,\n    WHOLE = 1,\n    HALF = 1 / 2,\n    QUARTER = 1 / 4,\n    EIGHTH = 1 / 8,\n    SIXTEENTH = 1 / 16,\n    THIRTYSECOND = 1 / 32,\n    SIXTYFOURTH = 1 / 64,\n    HUNDREDTWENTYEIGHTH = 1 / 128,\n    TWOHUNDREDFIFTYSIXTH = 1 / 256\n}\n\nexport type MIDIOctave = -5 | -4 | -3 | -2 | -1 | 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\nexport interface Tone {\n    baseTone: BaseTone;\n    octave: MIDIOctave;\n}// https://en.wikipedia.org/wiki/Octave#Notation\n\nexport type MIDINote = number;\n\nexport type NoteValue = number;\n\nexport enum Position {\n    ROOT = 0,\n    FIRST_INVERSION = 1,\n    SECOND_INVERSION = 2\n}\n","import {Accidental, BaseTone, MIDINote, Tone} from \"../../domain/Types\";\nimport {PositionInStaff} from \"./Utils\";\n\nexport enum Side {\n    LEFT = \"LEFT\",\n    RIGHT = \"RIGHT\"\n}\n\nexport interface ScrollTarget {\n    scrollTargetGroup?: string\n}\n\nexport interface ToneInfo extends Tone {\n    midiNote: MIDINote;\n    strKey: string;\n    staffPosition: PositionInStaff;\n    accidental: Accidental,\n}\n\nexport type PreferredAccidentalsMap = {\n    [tone in BaseTone]?: Accidental;\n};\n","import React, { Context, useContext } from \"react\";\n\nexport const CursorContext: Context<{x: number}> = React.createContext({x: 0});\nexport const Cursor = (props: { x: number, children: any }) => {\n    const currentCursorPos = useContext(CursorContext).x;\n    return <CursorContext.Provider value={{x: props.x + currentCursorPos}}>\n        {props.children}\n    </CursorContext.Provider>;\n  }\n;\n","import {Accidental, NoteValue, NoteValues} from \"../../domain/Types\";\nimport {PositionInStaff, positionInStaffToY} from \"./Utils\";\nimport React, {useContext} from \"react\";\nimport {StaffLine} from \"./StaffLine\";\nimport {Side, ToneInfo} from \"./Types\";\nimport {CursorContext} from \"./Cursor\";\n\ninterface NoteHeadProps {\n    x: number;\n    positionInStaff: PositionInStaff;\n    noteValue: NoteValue;\n}\n\nconst maskReference = (noteValue: NoteValue): string | undefined => {\n    if (noteValue < 0.5) {\n        return undefined;\n    } else if (noteValue < 1) {\n        return `url(#hollowNoteHeadMask${Side.LEFT})`;\n    } else {\n        return `url(#hollowNoteHeadMask${Side.RIGHT})`;\n    }\n};\nconst NoteHead = ({x, positionInStaff, noteValue}: NoteHeadProps) => {\n    const rx = 15;\n    const ry = 11;\n    const y = positionInStaffToY(positionInStaff);\n    return (\n        <ellipse\n            cx={x + rx}\n            cy={y + 2}\n            rx={rx}\n            ry={ry}\n            className={\"note__head\"}\n            fill={\"white\"}\n            strokeWidth={0}\n            mask={maskReference(noteValue)}\n            onClick={() => console.log(\"Klikk\", noteValue)}\n        />\n    );\n};\n\nexport interface NoteProps {\n    toneInfo: ToneInfo;\n    isTop: boolean;\n    isBottom: boolean;\n    stemSide: StemSide;\n    noteValue: NoteValue;\n    accidental?: Accidental;\n}\n\ninterface ExtensionLinesProps {\n    maxExtent: PositionInStaff;\n    x: number;\n}\n\nexport const LedgerLines = (props: ExtensionLinesProps) => {\n    let positions: Array<number> = [];\n    if (props.maxExtent >= 11) {\n        positions = new Array(props.maxExtent - 10)\n            .fill(0)\n            .map((position, idx) => idx + 11)\n            .filter(pos => pos % 2 !== 0);\n    } else if (props.maxExtent < 0) {\n        positions = new Array(props.maxExtent * -1)\n            .fill(0)\n            .map((position, idx) => idx * -1 - 1)\n            .filter(pos => pos % 2 !== 0);\n    }\n    return (\n        <>\n            {positions.map(position => (\n                <StaffLine\n                    key={position}\n                    position={position}\n                    x={props.x - 5}\n                    width={40}\n                />\n            ))}\n        </>\n    );\n};\nexport const Note = ({toneInfo, isBottom, isTop, noteValue}: NoteProps) => {\n    const {staffPosition} = toneInfo;\n    const cursor = useContext(CursorContext);\n    return (\n        <>\n            {(((isBottom && staffPosition >= 11) || (isTop && staffPosition < 0)) && (\n                <LedgerLines maxExtent={staffPosition} x={cursor.x}/>\n            )) ||\n            undefined}\n            <NoteHead\n                key={toneInfo.strKey}\n                x={cursor.x}\n                positionInStaff={staffPosition}\n                noteValue={noteValue}\n            />\n        </>\n    );\n};\n\nNote.defaultProps = {\n    isTop: true,\n    isBottom: true,\n    noteValue: NoteValues.QUARTER\n};\nexport type StemSide = Side;\n","import {Accidental, BaseTone, MIDINote, MIDIOctave, Tone} from \"./Types\";\n\nconst BaseTonesInOrder = [BaseTone.C, BaseTone.CSharp, BaseTone.D, BaseTone.DSharp, BaseTone.E, BaseTone.F, BaseTone.FSharp, BaseTone.G, BaseTone.GSharp, BaseTone.A, BaseTone.ASharp, BaseTone.H];\n\nconst OctavesInOrder : Array<MIDIOctave> = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6];\n\nexport const createTone = (props: {\n  baseTone: BaseTone,\n  octave: MIDIOctave\n}) : Tone => {\n  return {\n    baseTone: props.baseTone,\n    octave: props.octave\n  };\n};\n\nconst toneAsMIDINote = (tone: Tone) : number => {\n  const noteIndex = BaseTonesInOrder.findIndex((toneInList => toneInList === tone.baseTone));\n  return noteIndex + tone.octave * 12;\n};\n\nexport const addToTone = (tone: Tone, toneDelta: number) : Tone => {\n  const MIDINote = toneAsMIDINote(tone);\n  return toneFromNumber(MIDINote + toneDelta * 2);\n};\n\nconst division = (y: number, x: number) => {\n  const quotient = Math.floor(y / x);\n  const remainder = y % x;\n  return [quotient, remainder];\n};\n\nconst toneFromNumber = (number: MIDINote) : Tone => {\n  const [quotient, remainder] = division(number.valueOf(), BaseTonesInOrder.length);\n  return createTone({baseTone: BaseTonesInOrder[remainder], octave: OctavesInOrder[quotient + 5]});\n};\n\nexport const getAccidental = (tone: Tone) : Accidental => {\n  switch (tone.baseTone) {\n    case BaseTone.GSharp:\n    case BaseTone.FSharp:\n    case BaseTone.CSharp:\n    case BaseTone.ASharp:\n    case BaseTone.DSharp:\n      return \"sharp\";\n    case BaseTone.AFlat:\n    case BaseTone.DFlat:\n    case BaseTone.EFlat:\n    case BaseTone.GFlat:\n    case BaseTone.HFlat:\n      return \"flat\";\n    default:\n      return null;\n  }\n};\n\n\nexport const _testing = {toneAsMIDINote};\n\nexport {};\n","import {Accidental, Position, Tone} from \"./Types\";\nimport {addToTone} from \"./Tone\";\nimport {PreferredAccidentalsMap, ToneInfo} from \"../components/subcomponents/Types\";\nimport {PositionInStaff} from \"../components/subcomponents/Utils\";\nimport { ChordSpecWithInversion } from \"../controls/ControlPanel\";\n\nexport const majorThree = (root : Tone, position = Position.ROOT): Array<Tone> => {\n    return inverseThree([\n            root,\n            addToTone(root, 1.5),\n            addToTone(root, 3.5)\n        ] ,\n        position\n    )\n    // const first = addToTone(root, position > 0 ? 6 : 0);\n    // const second = addToTone(root, 2 + (position > 1 ? 6 : 0));\n    // const third = addToTone(root, 2 + 1.5);\n    // return [first, second, third];\n};\n\nexport const minorThree = (root : Tone, position = Position.ROOT): Array<Tone> => {\n    return inverseThree([\n            root,\n            addToTone(root, 2),\n            addToTone(root, 3.5)\n        ],\n        position\n    );\n    // const first = addToTone(root, position > 0 ? 6 : 0);\n    // const second = addToTone(root, 1.5 + (position > 1 ? 6 : 0));\n    // const third = addToTone(root, 2 + 1.5);\n    // return [first, second, third];\n};\n\nexport const inverseThree = (rootChordTones: Array<Tone>, position: Position) : Array<Tone> => {\n    if (position === Position.FIRST_INVERSION) {\n        return [addToTone(rootChordTones[0], 6), rootChordTones[1], rootChordTones[2]]\n    } else if (position === Position.SECOND_INVERSION) {\n        return [addToTone(rootChordTones[0], 6), addToTone(rootChordTones[1], 6), rootChordTones[2]]\n    } else {\n        return rootChordTones;\n    }\n};\n\ntype PartialToneInfo = Pick<ToneInfo, 'baseTone' | 'accidental' | 'staffPosition'>;\n\nexport const toneInfoAccidentalTranslator = <T extends PartialToneInfo>(map: PreferredAccidentalsMap): (toneInfo: T) => T => {\n    const needsReplacement = (tone: T) : boolean => {\n        return Boolean(map[tone.baseTone] && tone.accidental && tone.accidental !== map[tone.baseTone]);\n    };\n    const replace = (toneInfo: T) : {staffPosition: PositionInStaff, accidental: Accidental} => ({\n        staffPosition: toneInfo.accidental === \"sharp\" ? toneInfo.staffPosition - 1 : toneInfo.staffPosition + 1,\n        accidental: toneInfo.accidental === \"sharp\" ? \"flat\" : \"sharp\"\n    });\n\n    return (toneInfo: T): T => {\n        return needsReplacement(toneInfo) ? {...toneInfo, ...(replace(toneInfo))} : toneInfo;\n    };\n} ;\n\nexport const inverseChord = <T extends ChordSpecWithInversion>(chord: T, position: Position): T => {\n  const result = {\n    ...chord,\n    inversion: position,\n    tones: inverseThree(chord.rootTones, position),\n  };\n  return result\n};\n\n","import {PositionInStaff, positionInStaffToY} from \"./Utils\";\nimport {Accidental} from \"../../domain/Types\";\nimport React, {Context, useContext, useMemo} from \"react\";\nimport {CursorContext} from \"./Cursor\";\nimport { PreferredAccidentalsMap, ScrollTarget, ToneInfo } from \"./Types\";\nimport {toneInfoAccidentalTranslator} from \"../../domain/Functions\";\n\nexport interface AccidentalProps extends ScrollTarget {\n    staffPosition: PositionInStaff;\n    accidental: Accidental\n    column: number;\n    strKey: string;\n}\n\nconst AccidentalUse = ({staffPosition, column, symbolId, scrollTargetGroup}: AccidentalProps & {symbolId: string})  => {\n    const cursor = useContext(CursorContext);\n    const startY = positionInStaffToY(staffPosition - 1);\n    const xOffset = (30 * column);\n    return <use xlinkHref={`#${symbolId}`} x={cursor.x + xOffset} y={startY} data-scrolltargetgroup={scrollTargetGroup}/>\n};\n\nexport const Sharp = (props: AccidentalProps) => {\n    return <AccidentalUse {...props} symbolId={\"sharp\"}/>\n};\n\nexport const Flat = (props: AccidentalProps) => {\n    return <AccidentalUse {...props} symbolId={\"flat\"}/>\n};\n\ntype ToneInfoTranslator = (tone: ToneInfo) => ToneInfo;\n\nexport const PreferredAccidentalsContext : Context<{replacer: ToneInfoTranslator}> = React.createContext({replacer: (_: any) => _});\n\nexport const PreferredAccidentalsContextProvider = (props: {preferredAccidentals: PreferredAccidentalsMap, children?: any}) => {\n    const replacer = useMemo<ToneInfoTranslator>(() => toneInfoAccidentalTranslator(props.preferredAccidentals), [props.preferredAccidentals]);\n    return <PreferredAccidentalsContext.Provider value={{replacer}}>\n            {props.children}\n        </PreferredAccidentalsContext.Provider>;\n    }\n;\n","import React from \"react\";\nimport { cluster, LINE_HEIGHT } from \"./subcomponents/Utils\";\nimport { StaffLine } from \"./subcomponents/StaffLine\";\nimport { LedgerLines, Note } from \"./subcomponents/Note\";\nimport { PreferredAccidentalsMap, Side } from \"./subcomponents/Types\";\nimport { Cursor } from \"./subcomponents/Cursor\";\nimport { PreferredAccidentalsContextProvider } from \"./subcomponents/Accidentals\";\n\n\nconst HollowNoteHeadMask = ({ direction } : {direction: Side }) => (\n    <mask id={ `hollowNoteHeadMask${direction}`}\n          maskContentUnits=\"objectBoundingBox\"\n          maskUnits=\"objectBoundingBox\"\n    >\n        <rect x=\"0\" y=\"0\" width=\"1\" height=\"1\" fill=\"white\"/>\n        <ellipse cx=\".5\" cy=\".5\" rx=\".25\" ry=\".4\"\n                 fill=\"black\"\n                 transform={`rotate(${40 * (direction === Side.LEFT ? 1 : -1)}, .5, .5)`}/>\n    </mask>\n\n);\n\nconst SharpSymbolDefinition = ({lineHeight} : {lineHeight: number}) => <symbol id={\"sharp\"} width={40} height={lineHeight * 2.5}\n                                                                               viewBox={`0 0 10 20`}>\n    <g className={\"sharp\"} stroke=\"white\" strokeWidth={2.5}>\n        <line x1={2} x2={2} y1={1} y2={20} strokeWidth={1.5}/>\n        <line x1={8} x2={8} y1={0} y2={19} strokeWidth={1.5}/>\n        <line x1={0} x2={10} y1={6} y2={3} strokeWidth={3.5}/>\n        <line x1={0} x2={10} y1={16} y2={13} strokeWidth={3.5}/>\n    </g>\n</symbol>;\n\nconst FlatSymbolDefinition = ({lineHeight} : {lineHeight: number}) => <symbol id={\"flat\"} width={40} height={lineHeight * 2.5} viewBox={`5 0 10 20`}>\n    <text\n        x={0}\n        y={20}\n        lengthAdjust={\"spacingAndGlyphs\"}\n        textLength={20}\n        color={\"white\"}\n        style={{font: \"bold 30px sans-serif\", fill: \"white\"}}\n        strokeWidth={1.5}>♭</text>\n</symbol>;\n\ninterface StaffProps {\n    children?: any,\n    preferredAccidentals?: PreferredAccidentalsMap\n    topStaffLine?: number,\n    bottomStaffLine?: number\n}\n\nexport const calculateStaffWidth = (children : React.ReactChildren) => (React.Children.count(children) * 150 + 200) || 0\n\nexport default (props: StaffProps) => {\n    const topStaffLine = Math.min(props.topStaffLine || 0, 0);\n    const bottomStaffLine = Math.max(props.bottomStaffLine || 9, 9);\n\n    console.log('topStaffLine, bottomStaffLine = ', topStaffLine, bottomStaffLine);\n\n    const staffWidth = calculateStaffWidth(props.children);\n    const staffHeight = (bottomStaffLine - topStaffLine) * 20 + 50\n    return (\n        <div className={\"staff\"} style={{\"overflowX\": \"scroll\", \"width\": \"100%\"}}>\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width={staffWidth}\n                height={(bottomStaffLine - topStaffLine) * 20}\n                viewBox={`0 ${topStaffLine * 20 - 50} ${staffWidth} ${staffHeight}`}\n                className={\"staff\"}\n            >\n                <HollowNoteHeadMask direction={Side.LEFT}/>\n                <HollowNoteHeadMask direction={Side.RIGHT}/>\n                <SharpSymbolDefinition lineHeight={LINE_HEIGHT}/>\n                <FlatSymbolDefinition lineHeight={LINE_HEIGHT}/>\n\n\n                <PreferredAccidentalsContextProvider preferredAccidentals={props.preferredAccidentals || {}}>\n\n                    {[1, 3, 5, 7, 9].map(lineIdx => (\n                        <StaffLine key={lineIdx} position={lineIdx} width={staffWidth + 100}/>\n                    ))}\n                    {React.Children.map(props.children, (child, idx) =>\n                        <Cursor x={idx * 100} key={`child-${idx}`}>\n                            {child}\n                        </Cursor>\n                    )}\n                </PreferredAccidentalsContextProvider>\n            </svg>\n        </div>\n    );\n};\n\nexport const _testing = { Note, LedgerLines, cluster };\n","import React from \"react\";\nimport { ChordSpec, ChordSpecWithInversion, NamedChordSpec } from \"./ControlPanel\";\n\ninterface ChordButtonProps {\n    chordSpec: NamedChordSpec & ChordSpecWithInversion;\n    onClick: (chordSpec: NamedChordSpec & ChordSpecWithInversion) => void;\n}\n\nexport const ChordButton = (props : ChordButtonProps) => {\n    return <button onClick={() => props.onClick(props.chordSpec)}>{props.chordSpec.name}</button>\n};\n","import React from \"react\";\nimport { BaseTone, MIDIOctave, NoteValue, NoteValues, Position, Tone } from \"../domain/Types\";\nimport { majorThree, minorThree } from \"../domain/Functions\";\nimport { ChordButton } from \"./ChordButton\";\n\ninterface ControlPanelProps {\n  setChords: (chords: Array<NamedChordSpec & ChordSpecWithInversion>) => void,\n  addChord: (chord: NamedChordSpec & ChordSpecWithInversion) => void\n}\n\nexport interface NamedChordSpec extends ChordSpec {\n  name: String;\n}\n\nexport interface ChordSpec {\n  tones: Array<Tone>;\n  noteValue: NoteValue;\n}\n\nexport interface ChordSpecWithInversion extends ChordSpec {\n  inversion: Position;\n  rootTones: Array<Tone>\n}\n\nexport const ControlPanel = (props: ControlPanelProps) => {\n  return <div>\n    {Object.values(BaseTone).map((baseTone: BaseTone, idx: number) => {\n      const root = {baseTone, octave: 0 as MIDIOctave};\n      const major = majorThree(root, Position.ROOT);\n      const minor = minorThree(root, Position.ROOT);\n      /*\n                  const setChord = (chordSpec: NamedChordSpec & ChordSpecWithInversion) => props.setChords([\n                      chordSpec\n                  ]);\n      */\n      const addChord = (chordSpec: NamedChordSpec & ChordSpecWithInversion) => {\n        props.addChord(chordSpec);\n      };\n      const baseName = baseTone.replace(\"Sharp\", \"#\").replace(\"Flat\", \"♭\");\n      return <React.Fragment key={idx}>\n        <ChordButton chordSpec={{\n          tones: major,\n          noteValue: NoteValues.HALF,\n          name: baseName,\n          inversion: Position.ROOT,\n          rootTones: major\n        }} onClick={addChord}/>\n        <ChordButton chordSpec={{\n          tones: minor,\n          noteValue: NoteValues.HALF,\n          name: baseName + \"m\",\n          inversion: Position.ROOT,\n          rootTones: minor\n        }} onClick={addChord}/>\n      </React.Fragment>\n    })}\n  </div>;\n};\n","import {PositionInStaff, positionInStaffToY} from \"./Utils\";\nimport React, {useContext} from \"react\";\nimport {NoteValue} from \"../../domain/Types\";\nimport {CursorContext} from \"./Cursor\";\nimport { ScrollTarget } from \"./Types\";\n\ninterface StemProps extends ScrollTarget {\n    sortedNotePositions: Array<PositionInStaff>,\n    noteValue: NoteValue;\n}\n\nexport const Stem = ({sortedNotePositions, scrollTargetGroup}: StemProps) => {\n    const topNotePosition = sortedNotePositions[0];\n    const bottomNotePosition = sortedNotePositions[sortedNotePositions.length - 1];\n    const stemDirection: \"up\" | \"down\" = (bottomNotePosition > 5 && bottomNotePosition < 14) ? \"up\" : \"down\";\n    const startPosition = stemDirection === \"up\" ? bottomNotePosition - 8 : bottomNotePosition;\n    const endPosition = stemDirection === \"down\" ? topNotePosition + 8 : topNotePosition;\n    const y = positionInStaffToY(startPosition) + 5;\n    const length = positionInStaffToY(endPosition) - y;\n    const cursor = useContext(CursorContext);\n    return (\n        <rect\n            y={positionInStaffToY(startPosition) + 5}\n            x={cursor.x}\n            width={4}\n            height={length}\n            className={\"stem__line\"}\n            data-scrolltargetgroup={scrollTargetGroup}\n        />\n    );\n};\n","import {BaseTone, MIDINote, Tone} from \"./Types\";\nimport {ToneInfo} from \"../components/subcomponents/Types\";\nimport {getAccidental} from \"./Tone\";\nimport {PositionInStaff} from \"../components/subcomponents/Utils\";\n\nexport const mapToneToStaffPosition = (tone: Tone): PositionInStaff => {\n    const getBasePosition = () => {\n        switch (tone.baseTone) {\n            case BaseTone.C:\n            case BaseTone.CSharp:\n                return 11;\n            case BaseTone.D:\n            case BaseTone.DSharp:\n                return 10;\n            case BaseTone.E:\n            case BaseTone.EFlat:\n                return 9;\n            case BaseTone.F:\n            case BaseTone.FSharp:\n                return 8;\n            case BaseTone.G:\n            case BaseTone.GFlat:\n            case BaseTone.GSharp:\n                return 7;\n            case BaseTone.A:\n            case BaseTone.AFlat:\n            case BaseTone.ASharp:\n                return 6;\n            case BaseTone.H:\n            case BaseTone.HFlat:\n                return 5;\n            default:\n                throw new Error(\"Invalid tone: \" + JSON.stringify(tone));\n        }\n    };\n    return getBasePosition() - tone.octave * 7;\n};\nconst toneToMidiNote = (tone: Tone): MIDINote => {\n    const baseTones = [\n        BaseTone.C,\n        BaseTone.CSharp,\n        BaseTone.D,\n        BaseTone.DSharp,\n        BaseTone.E,\n        BaseTone.F,\n        BaseTone.FSharp,\n        BaseTone.G,\n        BaseTone.GSharp,\n        BaseTone.A,\n        BaseTone.ASharp,\n        BaseTone.H\n    ];\n\n    const getNormalizedBaseTone = (baseTone: BaseTone) => {\n        switch (baseTone) {\n            case BaseTone.EFlat:\n                return BaseTone.DSharp;\n            case BaseTone.GFlat:\n                return BaseTone.FSharp;\n            case BaseTone.AFlat:\n                return BaseTone.GSharp;\n            case BaseTone.HFlat:\n                return BaseTone.ASharp;\n            default:\n                return baseTone;\n        }\n    };\n\n    const baseTone = getNormalizedBaseTone(tone.baseTone);\n    // noinspection UnnecessaryLocalVariableJS\n    const midiNote: MIDINote =\n        baseTones.findIndex(currentBaseTone => currentBaseTone === baseTone) +\n        12 +\n        tone.octave * 12;\n\n    return midiNote;\n};\nconst toneToStrKey = (tone: Tone) => tone.baseTone + tone.octave;\n\nexport function toneToToneInfo(tone: Tone): ToneInfo {\n    return {\n        ...tone,\n        midiNote: toneToMidiNote(tone),\n        strKey: toneToStrKey(tone),\n        staffPosition: mapToneToStaffPosition(tone),\n        accidental: getAccidental(tone),\n    };\n}\n","import { MIDINote, NoteValues } from \"../domain/Types\";\nimport { ScrollTarget, Side, ToneInfo } from \"./subcomponents/Types\";\nimport { Note, NoteProps, StemSide } from \"./subcomponents/Note\";\nimport { cluster, flattenArray } from \"./subcomponents/Utils\";\nimport {\n  AccidentalProps,\n  Flat,\n  PreferredAccidentalsContext,\n  Sharp\n} from \"./subcomponents/Accidentals\";\nimport React, { useContext } from \"react\";\nimport { Cursor, CursorContext } from \"./subcomponents/Cursor\";\nimport { Stem } from \"./subcomponents/Stem\";\nimport { mapToneToStaffPosition, toneToToneInfo } from \"../domain/ToneInfo\";\nimport { ChordSpec } from \"../controls/ControlPanel\";\n\ninterface ChordProps extends ChordSpec, ScrollTarget {\n  onClick?: () => void;\n  onShiftClick?: () => void;\n}\n\nconst compareMIDINotes = (MIDINoteA: MIDINote, MIDINoteB: MIDINote) =>\n  MIDINoteA.valueOf() - MIDINoteB.valueOf();\nconst compareToneInfos = (\n  toneInfoA: { midiNote: MIDINote },\n  toneInfoB: { midiNote: MIDINote }\n) => compareMIDINotes(toneInfoA.midiNote, toneInfoB.midiNote);\nconst determineStemSide = (note: ToneInfo,\n                           positionInCluster: number,\n                           cluster: Array<ToneInfo>,\n                           stemSideForChord: StemSide\n) => {\n  if (cluster.length === 1) {\n    return stemSideForChord;\n  } else {\n    return (positionInCluster % 2 === 0 && Side.RIGHT) || Side.LEFT;\n  }\n};\n\nexport const calculateTopAndBottomStaffLine = (chords: Array<ChordSpec>): [number, number] => {\n  const tones = chords.map(chord => chord.tones).flat();\n  const staffPositions = tones.map(mapToneToStaffPosition);\n  const [minStaffPosition, maxStaffPosition] = staffPositions.reduce(([prevMin, prevMax], curr) => [Math.min(prevMin, curr), Math.max(prevMax, curr)], [Infinity, -Infinity]);\n  return [minStaffPosition, maxStaffPosition];\n}\n\nexport const Chord = (props: ChordProps) => {\n  const preferredAccidentalsReplacer = useContext(PreferredAccidentalsContext);\n  const partialToneInfos: Array<ToneInfo> = props.tones.map(toneToToneInfo).map(preferredAccidentalsReplacer.replacer).sort(compareToneInfos);\n\n  const noteClusters: Array<Array<ToneInfo>> = cluster(partialToneInfos, 1);\n  const accidentalClusters: Array<Array<ToneInfo>> = cluster(partialToneInfos.filter(toneInfo => toneInfo.accidental), 2);\n\n  const stemSideForChord = partialToneInfos[partialToneInfos.length - 1].staffPosition < 6 ? Side.LEFT : Side.RIGHT;\n\n  const notesProps: Array<NoteProps> = flattenArray<NoteProps>(\n    noteClusters.map((cluster, clusterIdx) =>\n      cluster.map(\n        (toneInfo, positionInCluster) => ({\n          toneInfo: {\n            ...toneInfo,\n          },\n          isTop: clusterIdx === noteClusters.length - 1 && positionInCluster === cluster.length - 1,\n          isBottom: clusterIdx === 0 && positionInCluster === 0,\n          stemSide: determineStemSide(toneInfo, positionInCluster, cluster, stemSideForChord),\n          noteValue: props.noteValue,\n          accidental: toneInfo.accidental,\n        })\n      )));\n\n  const accidentalsProps: Array<AccidentalProps> = flattenArray<AccidentalProps>(\n    accidentalClusters.map((cluster, clusterIdx) =>\n      cluster.map(\n        (toneInfo: ToneInfo, positionInCluster: number) => ({\n          accidental: toneInfo.accidental,\n          isTop: clusterIdx === accidentalClusters.length - 1 && positionInCluster === cluster.length - 1,\n          isBottom: clusterIdx === 0 && positionInCluster === 0,\n          staffPosition: toneInfo.staffPosition,\n          column: positionInCluster % 3,\n          strKey: `${toneInfo.strKey}-accidental`,\n        })\n      )));\n\n  const staffPositions = notesProps.map(noteProps => noteProps.toneInfo.staffPosition);\n\n  // const minStaffPosition = Math.min(...staffPositions);\n  // const maxStaffPosition = Math.max(...staffPositions);\n\n  const accidentalsStackWidth = 34;\n  const noteHeadsStackWidth = 27;\n  const stemWidth = 1;\n\n  const cursor = useContext(CursorContext);\n\n  const accidentalsStartX = cursor.x;\n  const numAccidentalColumns = Math.max(0, ...(accidentalsProps.map(accidentalProps => accidentalProps.column + 1)));\n  const leftNoteHeadsStartX = accidentalsStartX + (numAccidentalColumns) * accidentalsStackWidth;\n  const stemX = (notesProps.find(noteProps => noteProps.stemSide === Side.RIGHT) ? leftNoteHeadsStartX + noteHeadsStackWidth : leftNoteHeadsStartX);\n  const rightNodeHeadsStartX = stemX + stemWidth;\n  // const endX = rightNodeHeadsStartX + noteHeadsStackWidth;\n  // console.log(\"accidentalsStartX, leftNoteHeadsStartX, stemX, rightNodeHeadsStartX, numAccidentalColumns = \", accidentalsStartX, leftNoteHeadsStartX, stemX, rightNodeHeadsStartX, numAccidentalColumns);\n\n  const scrollTargetProps = {scrollTargetGroup: props.scrollTargetGroup}\n  // TODO: Test accidentals\n  return <g onClick={props.onClick}>\n    {/*<rect*/}\n    {/*    x={cursor.x}*/}\n    {/*    y={0}*/}\n    {/*    width={endX}*/}\n    {/*    height={positionInStaffToY(12) + 2}*/}\n    {/*    stroke={'white'}*/}\n    {/*    fill={'transparent'}*/}\n    {/*    strokeWidth={2}*/}\n    {/*    className={'outline'}*/}\n    {/*>*/}\n    {/*</rect>*/}\n    <Cursor x={accidentalsStartX}>\n      {accidentalsProps.map((accidentalProps: AccidentalProps) => accidentalProps.accidental === \"sharp\"\n        && <Sharp {...accidentalProps} key={accidentalProps.strKey}  {...scrollTargetProps}/>\n        || accidentalProps.accidental === \"flat\"\n        && <Flat {...accidentalProps} key={accidentalProps.strKey}  {...scrollTargetProps}/>)}\n    </Cursor>\n    <Cursor x={leftNoteHeadsStartX}>\n      {notesProps.filter(noteProps => noteProps.stemSide === Side.RIGHT).map((noteProps: NoteProps) =>\n        <Note key={noteProps.toneInfo.strKey} {...noteProps} {...scrollTargetProps} />)}\n    </Cursor>\n    <Cursor x={stemX}>\n      <Stem sortedNotePositions={staffPositions}\n            noteValue={props.noteValue} {...scrollTargetProps}/>\n    </Cursor>\n    <Cursor x={rightNodeHeadsStartX}>\n      {notesProps.filter(noteProps => noteProps.stemSide === Side.LEFT).map((noteProps: NoteProps) =>\n        <Note key={noteProps.toneInfo.strKey} {...noteProps} {...scrollTargetProps} />)}\n    </Cursor>\n\n  </g>;\n};\n\nChord.defaultProps = {\n  noteValue: NoteValues.QUARTER\n};\n","import React, { useLayoutEffect, useState } from \"react\";\nimport logo from \"./musical-notes.svg\";\nimport \"./App.css\";\nimport Staff from \"./components/Staff\";\nimport { BaseTone, Position } from \"./domain/Types\";\nimport { inverseChord } from \"./domain/Functions\";\nimport { ChordSpecWithInversion, ControlPanel, NamedChordSpec } from \"./controls/ControlPanel\";\nimport { calculateTopAndBottomStaffLine, Chord } from \"./components/Chord\";\n\nfunction TSXApp() {\n  const [chords, setChords] = useState<Array<NamedChordSpec & ChordSpecWithInversion>>([] as Array<NamedChordSpec & ChordSpecWithInversion>);\n\n  const [scrollTargetGroup, setScrollTargetGroupGroup] = useState<string | null>(null);\n\n  useLayoutEffect(() => {\n    if (scrollTargetGroup) {\n      const scrollTargetDomElements = document.querySelectorAll(`*[data-scrolltargetgroup = '${scrollTargetGroup}']`);\n      const scrollTargetDomElement = scrollTargetDomElements[scrollTargetDomElements.length - 1];\n      if (scrollTargetDomElement) {\n        scrollTargetDomElement.scrollIntoView();\n      }\n    }\n  }, [scrollTargetGroup])\n\n  const addChord = (chord: NamedChordSpec & ChordSpecWithInversion) => {\n    setChords([...chords, chord]);\n    setScrollTargetGroupGroup(\"chord-\" + (chords.length - 1))\n  }\n\n  const updateChord = (idx: number, chord: NamedChordSpec & ChordSpecWithInversion) => {\n    const updatedChords = [...chords];\n    updatedChords[idx] = chord;\n    setChords(updatedChords);\n  }\n\n  const rotateChordInversion = (idx: number, delta: number) => {\n    const chord = chords[idx];\n    const positions = [Position.ROOT, Position.FIRST_INVERSION, Position.SECOND_INVERSION];\n    let inversedPositionIdx = (chord.inversion + delta) % positions.length;\n    const inversedChord = inverseChord(chord, positions[inversedPositionIdx]);\n    updateChord(idx, inversedChord);\n  }\n\n  const [topStaffLine, bottomStaffLine] = calculateTopAndBottomStaffLine(chords);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n        <ControlPanel setChords={setChords} addChord={addChord}/>\n        <Staff preferredAccidentals={{[BaseTone.HFlat]: \"flat\"}} topStaffLine={topStaffLine} bottomStaffLine={bottomStaffLine}>\n          {chords.map((chord, idx) => <Chord tones={chord.tones} noteValue={chord.noteValue}\n                                             key={idx}\n                                             onClick={() => rotateChordInversion(idx, +1)}\n                                             scrollTargetGroup={\"chord-\" + idx}\n          />)}\n        </Staff>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default TSXApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import TSXApp from \"./TSXApp.tsx\";\nimport React from \"react\";\n\nexport default function() {\n  return <TSXApp />;\n}\n"],"sourceRoot":""}